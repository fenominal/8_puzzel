
import enum
class Action(enum.Enum):
    MoveDown=1
    MoveUP=2
    MoveLeft=3
    MoveRight=4
    NoAction=0

class Node:
    def __init__(self,ps,parent=None,act=Action.NoAction):
        self.position=ps
        self.parent=parent
        self.h=0
        self.f=0
        self.action=act
        

    def __eq__(self,other):
        return self.position==other.position
    
    def __lt__(self,other):
        return self.f < other.f
    def __repr__(self):
        return '\n'.join([str(self.action),str(self.position[:3]),str(self.position[3:6]),str(self.position[6:])]).replace('[', '').replace(']', '').replace(',', '').replace('0', '_')
    def _h(self,goal):
        return sum([1 if self.position[i] != goal[i] else 0 for i in range(9)])
    
    def generateValue(self,goal):
        self.h=self._h(goal)
        self.f=self.h
        
    def possibleModes(self):
        succ=[]
        i=self.position[:]
        #Move Down
        if i in [3,4,5,6,7,8]:
            newValue=self.position[:]
            newValue[i],newValue[i-3]=newValue[i-3],newValue[i]
            succ.append(Node(newValue,self,Action().MoveDown))
        #Move Right
        if i in [1,2,4,5,7,8]:
            newValue=self.position[:]
            newValue[i],newValue[i-1]=newValue[i-1],newValue[i]
            succ.append(Node(newValue,self,Action().MoveRight))
        #Move Left
        if i in [0,1,3,4,6,7]:
            newValue=self.position[:]
            newValue[i],newValue[i+1]=newValue[i+1],newValue[i]
            succ.append(Node(newValue,self,Action().MoveLeft))
        #Move Up
        if i in [0,1,2,3,4,5]:
            newValue=self.position[:]
            newValue[i],newValue[i+3]=newValue[i+3],newValue[i]
            succ.append(Node(newValue,self,Action().MoveUp))
        return succ
    
        
        
        
if __name__=='__main__':
    initstate=[1,2,3,0,4,5,6,7,8]
    goalstate=[1,2,3,4,5,6,7,8,0]
    initialstate=Node(initstate)
    print(initialstate)
    initialstate.generateValue(goalstate)
    print("h:",initialstate.h,"f:",initialstate.f)
